theme_classic() + theme(strip.background = element_blank(), axis.text.x.bottom = element_text(angle = -90), axis.text.x = element_text(size = 16)) +
geom_signif(stat="identity",
data=data.frame(x=c(1, 2, 3), xend=c(2, 3, 4),
y=c(78, 80, 82), annotation=c("NS", " NS ", " * ")),
aes(x=x,xend=xend, y=y, yend=y, annotation=annotation)) +
geom_signif(comparisons=list(c("ctr+rif", "ccl4+rif")), annotations="**",
y_position = 84, tip_length = 0, vjust=0.4)
#Re-arranging the order of the figure, controls first
pChao$data$Group <- as.character(pChao$data$Group)
pChao$data$Group <- factor(pChao$data$Group, levels=newSTorder)
pChao
# start with your phyloseq object
ps.taxa.sub <- subset_samples(ps_0)
phyloseq.obj <- ps.taxa.sub
pco.data <- phyloseq.obj@otu_table %>%
t() %>%
as.data.frame() %>%
# bray-curtis dissimilarity
vegan::vegdist(method = 'bray',
diag = TRUE, upper = TRUE) %>%
# multidimensional scaling, aka PCoA
stats::cmdscale(k = 2, eig = TRUE)
# add cohort labels/metadata for plotting
plot.points <- pco.data$points %>%
as.data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
left_join(cohort.labels)
library(rownames)
library(tibble)
library(tibble)
# start with your phyloseq object
ps.taxa.sub <- subset_samples(ps_0)
phyloseq.obj <- ps.taxa.sub
pco.data <- phyloseq.obj@otu_table %>%
t() %>%
as.data.frame() %>%
# bray-curtis dissimilarity
vegan::vegdist(method = 'bray',
diag = TRUE, upper = TRUE) %>%
# multidimensional scaling, aka PCoA
stats::cmdscale(k = 2, eig = TRUE)
# add cohort labels/metadata for plotting
plot.points <- pco.data$points %>%
as.data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
left_join(cohort.labels)
# save first and second components to label % variation explained on plots
axes <- sprintf(fmt='%.2f',
(pco.data$eig[1:2]/sum(pco.data$eig[pco.data$eig > 0])) * 100)
# plot
plot.points %>%
ggplot(aes(x = V1, y = V2)) +
geom_point(aes(fill = Group), size=3, shape=21, alpha=0.8) +
ggsci::scale_fill_npg() +
labs(
size = 'Point Type',
x = paste0('PCo 1 [', axes[1], '%]'),
y = paste0('PCo 2 [', axes[2], '%]')) +
guides(size = FALSE, shape = FALSE) +
ggpubr::theme_pubr() +
ggpubr::labs_pubr() +
theme(legend.position = c(0.59, 0.9))
library(ggplot2)
library(tibble)
# start with your phyloseq object
ps.taxa.sub <- subset_samples(ps_0)
phyloseq.obj <- ps.taxa.sub
pco.data <- phyloseq.obj@otu_table %>%
t() %>%
as.data.frame() %>%
# bray-curtis dissimilarity
vegan::vegdist(method = 'bray',
diag = TRUE, upper = TRUE) %>%
# multidimensional scaling, aka PCoA
stats::cmdscale(k = 2, eig = TRUE)
# add cohort labels/metadata for plotting
plot.points <- pco.data$points %>%
as.data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
left_join(cohort.labels)
# save first and second components to label % variation explained on plots
axes <- sprintf(fmt='%.2f',
(pco.data$eig[1:2]/sum(pco.data$eig[pco.data$eig > 0])) * 100)
# plot
plot.points %>%
ggplot(aes(x = V1, y = V2)) +
geom_point(aes(fill = Group), size=3, shape=21, alpha=0.8) +
ggsci::scale_fill_npg() +
labs(
size = 'Point Type',
x = paste0('PCo 1 [', axes[1], '%]'),
y = paste0('PCo 2 [', axes[2], '%]')) +
guides(size = FALSE, shape = FALSE) +
ggpubr::theme_pubr() +
ggpubr::labs_pubr() +
theme(legend.position = c(0.59, 0.9))
plot.points <- pco.data$points %>%
as.data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
left_join(cohort.labels)
pco.data <- phyloseq.obj@otu_table %>%
t() %>%
as.data.frame() %>%
# bray-curtis dissimilarity
vegan::vegdist(method = 'bray',
diag = TRUE, upper = TRUE) %>%
# multidimensional scaling, aka PCoA
stats::cmdscale(k = 2, eig = TRUE)
# add cohort labels/metadata for plotting
plot.points <- pco.data$points %>%
as.data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
left_join(cohort.labels)
library(cohorts
)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
ccl4 = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
ctr = 'Control')) %>%
# change order
mutate_at(vars(Group), ~ fct_relevel(., 'Control', 'Ctr+rif','CCL4','CCL4+rif'))
phyloseq.obj@sam_data
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
ccl4 = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
ctr = 'Control'))
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
`ccl4` = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
`ctr` = 'Control')) %>%
# change order
mutate_at(vars(Group), ~ fct_relevel(., 'Control', 'Ctr+rif','CCL4','CCL4+rif'))
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column(SampleID) %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column(sam_data$SampleID) %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column(metadata$SampleID) %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
`ccl4` = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
`ctr` = 'Control')) %>%
# change order
mutate_at(vars(Group), ~ fct_relevel(., 'Control', 'Ctr+rif','CCL4','CCL4+rif'))
library(forcats)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
`ccl4` = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
`ctr` = 'Control'))
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
`ccl4` = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
`ctr` = 'Control'))
cohort.labels
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
`ccl4` = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
`ctr` = 'Control')) %>%
# change order
mutate_at(vars(Group), ~ fct_relevel(., 'Control', 'Ctr+rif','CCL4','CCL4+rif'))
plot.points <- pco.data$points %>%
as.data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
left_join(cohort.labels)
# save first and second components to label % variation explained on plots
axes <- sprintf(fmt='%.2f',
(pco.data$eig[1:2]/sum(pco.data$eig[pco.data$eig > 0])) * 100)
# plot
plot.points %>%
ggplot(aes(x = V1, y = V2)) +
geom_point(aes(fill = Group), size=3, shape=21, alpha=0.8) +
ggsci::scale_fill_npg() +
labs(
size = 'Point Type',
x = paste0('PCo 1 [', axes[1], '%]'),
y = paste0('PCo 2 [', axes[2], '%]')) +
guides(size = FALSE, shape = FALSE) +
ggpubr::theme_pubr() +
ggpubr::labs_pubr() +
theme(legend.position = c(0.59, 0.9))
library(mixOmics)
pca = pca(t(log10(rawDada2_Species_f)), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "Log10")
plot(pca$loadings$X[,1], pca$loadings$X[,2], xlab = "Comp1", ylab = "Comp2",
main = "loading plot")
pca = pca(t(log10(rawDada2_Species_f)), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "Log10")
plot(pca$loadings$X[,1], pca$loadings$X[,2], xlab = "Comp1", ylab = "Comp2",
main = "loading plot")
plot.points %>%
ggplot(aes(x = V1, y = V2)) +
geom_point(aes(fill = Batch), size=3, shape=21, alpha=0.8) +
ggsci::scale_fill_npg() +
labs(
size = 'Point Type',
x = paste0('PCo 1 [', axes[1], '%]'),
y = paste0('PCo 2 [', axes[2], '%]')) +
guides(size = FALSE, shape = FALSE) +
ggpubr::theme_pubr() +
ggpubr::labs_pubr() +
theme(legend.position = c(0.59, 0.9))
plot.points <- pco.data$points %>%
as.data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
left_join(cohort.labels)
# save first and second components to label % variation explained on plots
axes <- sprintf(fmt='%.2f',
(pco.data$eig[1:2]/sum(pco.data$eig[pco.data$eig > 0])) * 100)
# plot
plot.points %>%
ggplot(aes(x = V1, y = V2)) +
geom_point(aes(fill = Batch), size=3, shape=21, alpha=0.8) +
ggsci::scale_fill_npg() +
labs(
size = 'Point Type',
x = paste0('PCo 1 [', axes[1], '%]'),
y = paste0('PCo 2 [', axes[2], '%]')) +
guides(size = FALSE, shape = FALSE) +
ggpubr::theme_pubr() +
ggpubr::labs_pubr() +
theme(legend.position = c(0.59, 0.9))
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group))
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Batch)
)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Batch))
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Batch)
ps.taxa.sub <- subset_samples(ps_0)
phyloseq.obj <- ps.taxa.sub
pco.data <- phyloseq.obj@otu_table %>%
t() %>%
as.data.frame() %>%
# bray-curtis dissimilarity
vegan::vegdist(method = 'bray',
diag = TRUE, upper = TRUE) %>%
# multidimensional scaling, aka PCoA
stats::cmdscale(k = 2, eig = TRUE)
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
`ccl4` = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
`ctr` = 'Control')) %>%
# change order
mutate_at(vars(Group), ~ fct_relevel(., 'Control', 'Ctr+rif','CCL4','CCL4+rif'))
# get group labels
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
ccl4 = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
ctr = 'Control')) %>%
# change order
mutate_at(vars(Group), ~ fct_relevel(., 'CCL4', 'CCL4+rif','Ctr+rif','Control'))
rm cohort.labels
rm(cohort.labels)
# get group labels
cohort.labels <- phyloseq.obj@sam_data %>%
data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble() %>%
# replace below with your own code, e.g. Group and other variables
select(SampleID, Group) %>%
# change labels, format: desired name = 'existing name'
mutate_at(vars(Group), ~ fct_recode(.,
ccl4 = 'CCL4',
`ccl4+rif` = 'CCL4+rif',
`ctr+rif` = 'Ctr+rif',
ctr = 'Control')) %>%
# change order
mutate_at(vars(Group), ~ fct_relevel(., 'CCL4', 'CCL4+rif','Ctr+rif','Control'))
plot.points <- pco.data$points %>%
as.data.frame() %>%
rownames_to_column('SampleID') %>%
as_tibble()
axes <- sprintf(fmt='%.2f',
(pco.data$eig[1:2]/sum(pco.data$eig[pco.data$eig > 0])) * 100)
plot.points %>%
ggplot(aes(x = V1, y = V2)) +
geom_point(aes(fill = Group), size=3, shape=21, alpha=0.8) +
ggsci::scale_fill_npg() +
labs(
size = 'Point Type',
x = paste0('PCo 1 [', axes[1], '%]'),
y = paste0('PCo 2 [', axes[2], '%]')) +
guides(size = FALSE, shape = FALSE) +
ggpubr::theme_pubr() +
ggpubr::labs_pubr() +
theme(legend.position = c(0.5, 0.8))
plot.points %>%
ggplot(aes(x = V1, y = V2)) +
geom_point( size=3, shape=21, alpha=0.8) +
ggsci::scale_fill_npg() +
labs(
size = 'Point Type',
x = paste0('PCo 1 [', axes[1], '%]'),
y = paste0('PCo 2 [', axes[2], '%]')) +
guides(size = FALSE, shape = FALSE) +
ggpubr::theme_pubr() +
ggpubr::labs_pubr() +
theme(legend.position = c(0.5, 0.8))
library(mixOmics)
pca = pca(t(log10(rawDada2_Species_f)), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "Log10")
plot(pca$loadings$X[,1], pca$loadings$X[,2], xlab = "Comp1", ylab = "Comp2",
main = "loading plot")
pca = pca(t(log10(rawDada2_Species_f)), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "Log10")
library(limma)
y <- removeBatchEffect((log10(rawDada2_Species_f)), batch = metadata$Batch)
pca = pca(t(y), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10 + removelima")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "log10 + removelima")
#Raw data
rawDada2_Species <- as.data.frame(otu_table(ps_2))
rawDada2_Species <- data.frame(rawDada2_Species)
rawDada2_Species <- rawDada2_Species[,metadata$SampleID]
# Delete rows with all values = 0
rawDada2_Species <- rawDada2_Species[rowSums(rawDada2_Species) != 0,]
# Add 1 count to avoid log problems
rawDada2_Species <- rawDada2_Species + 1
total = colSums(rawDada2_Species)
View(rawDada2_Species)
View(otu_table(ps_2))
# Note: we replaced all zero values by 1 to avoid log errors
zeros <- t(apply(rawDada2_Species, 1, function(i){
do.call(cbind, lapply(unique(metadata$Group), function(x){
sum(i[c(metadata$Group == x)] == 1)
}))
}))
colnames(zeros) = unique(metadata$Group)
zeros <- data.frame(zeros[rownames(rawDada2_Species),])
bp <- do.call(cbind, lapply(1:10, function(y){
logic_z <- data.frame(zeros <= y)
logic_z$sum <- rowSums(logic_z)
sum(logic_z$sum >= 1)
}))
colnames(bp)= 1:10
{my_bar <- barplot(bp, main = "filter in at least 1 group <= number of zeros",
xlab = "Number of zeros", ylab = "number of final Species",
ylim = c(0,max(bp)+20))
text(my_bar, bp+10 , paste("n: ", bp, sep="") ,cex=1) }
logic_z <- data.frame(zeros <= 5)
logic_z$sum <- rowSums(logic_z)
rawDada2_Species_f = rawDada2_Species[logic_z$sum >= 1,]
# Data in percentage (%)
total = colSums(rawDada2_Species_f)
boxplot(rawDada2_Species_f, las = 2)
boxplot(log(rawDada2_Species_f+1), las = 2)
library(mixOmics)
pca = pca(t(log10(rawDada2_Species_f)), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "Log10")
plot(pca$loadings$X[,1], pca$loadings$X[,2], xlab = "Comp1", ylab = "Comp2",
main = "loading plot")
pca = pca(t(clr(rawDada2_Species_f)), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "Log10")
plot(pca$loadings$X[,1], pca$loadings$X[,2], xlab = "Comp1", ylab = "Comp2",
main = "loading plot")
library(compositions)
pca = pca(t(clr(rawDada2_Species_f)), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "Log10")
plot(pca$loadings$X[,1], pca$loadings$X[,2], xlab = "Comp1", ylab = "Comp2",
main = "loading plot")
y <- removeBatchEffect((clr(rawDada2_Species_f)), batch = metadata$Batch)
pca = pca(t(y), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10 + removelima")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "log10 + removelima")
y <- removeBatchEffect(((rawDada2_Species_f)), batch = metadata$Batch)
pca = pca(t(y), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10 + removelima")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "log10 + removelima")
y <- removeBatchEffect(((rawDada2_Species_f)), batch = metadata$Batch)
pca = pca(t(y), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10 + removelima")
y <- removeBatchEffect((clrInv(rawDada2_Species_f)), batch = metadata$Batch)
pca = pca(t(y), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10 + removelima")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "log10 + removelima")
y <- removeBatchEffect((normalize(rawDada2_Species_f)), batch = metadata$Batch)
pca = pca(t(y), ncomp = 2, center = T, scale = F)
plotIndiv(pca, group = metadata$Group, legend = T, title = "log10 + removelima")
plotIndiv(pca, group = metadata$Batch, legend = T, title = "log10 + removelima")
